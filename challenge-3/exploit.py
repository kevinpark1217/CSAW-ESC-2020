import os

# riscv environment setup
riscv_path = os.path.abspath("../riscv/bin")
os.environ["PATH"] = f'{riscv_path}:{os.environ["PATH"]}'

from pwn import *

# context.terminal = ['tmux', 'splitw', '-h']
# context.arch = "riscv32"
binary = '../docker/qual-esc2020.elf'

bin = ELF(binary)

conn = remote('127.0.0.1', 4444)
gdb.attach(target=('127.0.0.1', 1234), gdbscript='''
break *0x20400562
''', exe=binary)

# Pick 3rd challenge
print(conn.recvline().decode("utf-8"))
conn.sendline(b"3")

# Calculate solution based on memory analysis
answers = [0x33334323, 0x3c33473c, 0x332e3c32, 0x4930453b]
payload = b""
for i in range(len(answers)):
    payload += p32(answers[i])
payload = payload[::-1]
print(f"Solution: {payload}")

# Enter 16 characters
print(conn.recvline().decode("utf-8"))
conn.sendline(payload)

# Solved message
print(conn.recvline().decode("utf-8"))

# conn.interactive()
conn.close()